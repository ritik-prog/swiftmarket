import React, { useState } from "react";

const ProductDetails = () => {
  const [inputValue, setInputValue] = useState("");
  const [keywords, setKeywords] = useState([
    "Organic",
    "Gluten-free",
    "Vegan",
    "Non-GMO",
    "Fair trade",
    "Sustainable",
    "Handcrafted",
    "Locally sourced",
    "Artisanal",
    "Small batch",
  ]);

  function handleInputChange(event: any) {
    setInputValue(event.target.value);
  }

  function handleKeyDown(event: any) {
    if (event.key === "Enter" && inputValue.trim() !== "") {
      setKeywords([...keywords, inputValue.trim()]);
      setInputValue("");
    }
  }

  function handleRemoveKeyword(indexToRemove: any) {
    setKeywords((prevKeywords) =>
      prevKeywords.filter((_, index) => index !== indexToRemove)
    );
  }

  const [links, setLinks] = useState<string[]>([]);
  const [error, setError] = useState("");

  function isImgUrl(url: any) {
    return /\.(jpg|jpeg|png|webp|avif|gif)$/.test(url);
  }

  const handleAddLink = async (event: any) => {
    event.preventDefault();
    const input = event.target.imageLink;
    const link = input.value.trim();

    if (!isImgUrl(link)) {
      setError("Please enter a valid image link");
      return;
    }

    console.log(isImgUrl(link));
    if (links.includes(link)) {
      // Check for duplicate links
      setError("Link already exists");
      return;
    }

    // Add link to list
    setLinks([...links, link]);
    input.value = "";
    input.focus();
    setError("");
  };

  const handleRemoveLink = (link: string) => {
    setLinks(links.filter((l) => l !== link));
    setError("");
  };

  return (
    <div>
      <div className="bg-white shadow p-4 rounded-lg">
        <h1 className="text-xl font-bold">Product Details</h1>
      </div>
      <div className="p-4 bg-white shadow-lg rounded-lg max-w-xl mt-10">
        <div className="grid grid-cols-2 gap-4">
          {/* inputs */}
          <div className="grid w-full max-w-sm items-center gap-1.5">
            <label
              className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
              htmlFor="email"
            >
              Email
            </label>
            <input
              className="flex h-10 w-full rounded-md border border-gray-300 bg-transparent py-2 px-3 text-sm placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-400 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50 dark:border-gray-700 dark:text-gray-50 dark:focus:ring-gray-400 dark:focus:ring-offset-gray-900"
              type="email"
              id="email"
              placeholder="Email"
            />
          </div>
          <div className="grid w-full max-w-sm items-center gap-1.5">
            <label
              className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
              htmlFor="email"
            >
              Email
            </label>
            <input
              className="flex h-10 w-full rounded-md border border-gray-300 bg-transparent py-2 px-3 text-sm placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-400 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50 dark:border-gray-700 dark:text-gray-50 dark:focus:ring-gray-400 dark:focus:ring-offset-gray-900"
              type="email"
              id="email"
              placeholder="Email"
            />
          </div>
        </div>
        {/* keywords */}
        <div className="m-4">
          <div className="bg-gray-200 rounded-lg shadow-lg p-4">
            <p className="font-medium text-gray-700 mb-2">
              Keywords generated by{" "}
              <span className="text-indigo-600 font-bold">SwiftKey</span>
            </p>
            <div className="flex flex-wrap gap-2">
              {keywords.map((keyword: any, index: any) => (
                <div
                  key={index}
                  className="bg-gray-300 rounded-full py-1 px-3 text-sm font-medium text-gray-700 flex items-center"
                >
                  {keyword}
                  <button
                    className="ml-2 text-gray-500 hover:text-gray-700 focus:outline-none"
                    onClick={() => handleRemoveKeyword(index)}
                  >
                    &times;
                  </button>
                </div>
              ))}
            </div>
            <input
              className="mt-3 w-full flex-1 h-10 rounded-md border border-gray-300 bg-transparent py-2 px-3 text-sm placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-400 focus:ring-offset-1 dark:border-gray-700 dark:text-gray-50 dark:focus:ring-gray-400 dark:focus:ring-offset-gray-900"
              type="text"
              placeholder="Enter a keyword"
              value={inputValue}
              onChange={handleInputChange}
              onKeyDown={handleKeyDown}
            />
          </div>
        </div>
        {/* links */}
        <div className="p-4 bg-white shadow-lg rounded-lg max-w-xl">
          <form onSubmit={handleAddLink}>
            <label htmlFor="imageLink">Enter image link:</label>
            <div className="flex">
              <input
                className="flex-1 h-10 rounded-md border border-gray-300 bg-transparent py-2 px-3 text-sm placeholder:text-gray-400 focus:outline-none focus:ring-1 focus:ring-gray-400 focus:ring-offset-1"
                type="url"
                id="imageLink"
                placeholder="https://example.com/image.jpg"
                required
              />
              <button
                type="submit"
                className="ml-2 px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:bg-indigo-700"
              >
                Add
              </button>
            </div>
            {error && <p className="text-red-500 mt-2">{error}</p>}
          </form>
          <div className="flex flex-wrap gap-2 mt-2">
            {links.map((link, index) => (
              <div key={index} className="relative">
                <img
                  src={link}
                  alt={`Image ${index + 1}`}
                  className="h-20 w-20 rounded-md object-cover"
                />
                <button
                  onClick={() => handleRemoveLink(link)}
                  className="absolute top-0 right-0 rounded-full bg-red-500 text-white h-5 w-5 flex items-center justify-center"
                >
                  &times;
                </button>
              </div>
            ))}
          </div>
          {links.length === 0 && (
            <p className="mt-4 text-sm text-gray-500">
              No image links added yet. Enter an image link above to add one.
            </p>
          )}
        </div>
        {/* buttons */}
        <div className="p-4">
          <button className="mr-3 rounded-md bg-yellow-600 px-3.5 py-1.5 text-base font-semibold leading-7 text-white hover:bg-yellow-500">
            Update Product
          </button>
          <button className="rounded-md bg-red-600 px-3.5 py-1.5 text-base font-semibold leading-7 text-white hover:bg-red-500">
            Delete Product
          </button>
        </div>
      </div>
    </div>
  );
};

export default ProductDetails;
