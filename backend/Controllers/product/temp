
        var filterParams = {};

        if (req.query.category) {
            filterParams.category = ""
            filterParams.category = req.query.category;
        }

        // Check for price range filter
        if (req.query.minPrice || req.query.maxPrice) {
            filterParams.price = {};
            if (req.query.minPrice) {
                filterParams.price.$gte = parseFloat(req.query.minPrice);
            }
            if (req.query.maxPrice) {
                filterParams.price.$lte = parseFloat(req.query.maxPrice);
            }
        }

        // Check for quantity filter
        if (req.query.minQuantity || req.query.maxQuantity) {
            filterParams.quantity = {};
            if (req.query.minQuantity) {
                filterParams.quantity.$gte = parseInt(req.query.minQuantity);
            }
            if (req.query.maxQuantity) {
                filterParams.quantity.$lte = parseInt(req.query.maxQuantity);
            }
        }

        // Check for purchase count filter
        if (req.query.minPurchaseCount || req.query.maxPurchaseCount) {
            filterParams.purchaseCount = {};
            if (req.query.minPurchaseCount) {
                filterParams.purchaseCount.$gte = parseInt(req.query.minPurchaseCount);
            }
            if (req.query.maxPurchaseCount) {
                filterParams.purchaseCount.$lte = parseInt(req.query.maxPurchaseCount);
            }
        }

        // Check for ratings filter
        if (req.query.minRatings || req.query.maxRatings) {
            filterParams.ratings = {};
            if (req.query.minRatings) {
                filterParams.ratings.$gte = parseFloat(req.query.minRatings);
            }
            if (req.query.maxRatings) {
                filterParams.ratings.$lte = parseFloat(req.query.maxRatings);
            }
        }

        // Check for average ratings filter
        if (req.query.minRatingsAvg || req.query.maxRatingsAvg) {
            filterParams.ratingsAvg = {};
            if (req.query.minRatingsAvg) {
                filterParams.ratingsAvg.$gte = parseFloat(req.query.minRatingsAvg);
            }
            if (req.query.maxRatingsAvg) {
                filterParams.ratingsAvg.$lte = parseFloat(req.query.maxRatingsAvg);
            }
        }

        // Check for featured filter
        if (req.query.featured) {
            filterParams.featured = req.query.featured === 'true';
        }

        // Check for views filter
        if (req.query.minViews || req.query.maxViews) {
            filterParams.views = {};
            if (req.query.minViews) {
                filterParams.views.$gte = parseInt(req.query.minViews);
            }
            if (req.query.maxViews) {
                filterParams.views.$lte = parseInt(req.query.maxViews);
            }
        }

        // Check for likes filter
        if (req.query.minLikes || req.query.maxLikes) {
            filterParams.likes = {};
            if (req.query.minLikes) {
                filterParams.likes.$gte = parseInt(req.query.minLikes);
            }
            if (req.query.maxLikes) {
                filterParams.likes.$lte = parseInt(req.query.maxLikes);
            }
        }

        // Check for availability filter
        if (req.query.isAvailable) {
            filterParams.isAvailable = req.query.isAvailable === 'true';
        }

        // // Add search query filter
        if (req.query.search) {
            const query = req.query.search;
            const tokens = query.split(' ');
            const queryObject = {
                $and: [
                    { isAvailable: true },
                    {
                        $or: [
                            { productName: { $regex: query, $options: 'i' } },
                            {
                                businessUsername: { $regex: query, $options: 'i' }
                            },
                            {
                                category: { $regex: query, $options: 'i' }
                            },
                            { tags: { $in: tokens } },
                            { $text: { $search: query } },
                            {
                                $expr: {
                                    $gt: [{ $size: { $setIntersection: ['$keywords', tokens] } }, 0]
                                }
                            }
                        ]
                    },
                ]
            };
            filterParams = { ...filterParams, ...queryObject };
        }