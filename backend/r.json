{
  _mongooseOptions: {},
  _transforms: [],
  _hooks: Kareem { _pres: Map(0) {}, _posts: Map(0) {} },
  _executionStack: null,
  mongooseCollection: Collection {
    collection: Collection { s: [Object] },
    Promise: [Function: Promise],
    modelName: 'User',
    _closed: false,
    opts: {
      autoIndex: true,
      autoCreate: true,
      schemaUserProvidedOptions: [Object],
      capped: false,
      Promise: [Function: Promise],
      '$wasForceClosed': undefined
    },
    name: 'users',
    collectionName: 'users',
    conn: NativeConnection {
      base: [Mongoose],
      collections: [Object],
      models: [Object],
      config: {},
      replica: false,
      options: null,
      otherDbs: [],
      relatedDbs: {},
      states: [Object: null prototype],
      _readyState: 1,
      _closeCalled: undefined,
      _hasOpened: true,
      plugins: [],
      id: 0,
      _queue: [],
      _listening: false,
      _connectionString: 'mongodb://myuser:mypassword@127.0.0.1:27017/?authSource=admin',
      _connectionOptions: [Object],
      client: [MongoClient],
      '$initialConnection': [Promise],
      db: [Db],
      host: '127.0.0.1',
      port: 27017,
      name: 'test'
    },
    queue: [],
    buffer: false,
    emitter: EventEmitter {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      [Symbol(kCapture)]: false
    }
  },
  model: Model { User },
  schema: Schema {
    obj: {
      username: [Object],
      name: [Object],
      email: [Object],
      password: [Object],
      address: [Object],
      verificationStatus: [Object],
      role: [Object],
      orders: [Array],
      paymentDetails: [Object],
      transactionHistory: [Object],
      tokens: [Array],
      seller: [Object],
      banStatus: [Object],
      verificationCode: [Object],
      verificationCodeExpiresAt: [Object],
      createdAt: [Object],
      updatedAt: [Object]
    },
    paths: {
      username: [SchemaString],
      name: [SchemaString],
      email: [SchemaString],
      password: [SchemaString],
      address: [SchemaString],
      verificationStatus: [SchemaBoolean],
      role: [SchemaString],
      orders: [SchemaArray],
      'paymentDetails.blockchainWalletAddress': [SchemaString],
      'paymentDetails.paypalAccountEmailAddress': [SchemaString],
      'paymentDetails.card.cardNumber': [SchemaString],
      'paymentDetails.card.cardHolderName': [SchemaString],
      'paymentDetails.card.expirationDate': [SchemaString],
      'paymentDetails.card.cvv': [SchemaString],
      transactionHistory: [DocumentArrayPath],
      tokens: [DocumentArrayPath],
      seller: [ObjectId],
      'banStatus.isBanned': [SchemaBoolean],
      'banStatus.banExpiresAt': [SchemaDate],
      verificationCode: [SchemaString],
      verificationCodeExpiresAt: [SchemaDate],
      createdAt: [SchemaDate],
      updatedAt: [SchemaDate],
      _id: [ObjectId],
      __v: [SchemaNumber]
    },
    aliases: {},
    subpaths: {
      'orders.$': [ObjectId],
      'transactionHistory.product': [SchemaString],
      'transactionHistory.amount': [SchemaNumber],
      'transactionHistory.date': [SchemaDate],
      'transactionHistory._id': [ObjectId],
      'tokens.token': [SchemaString],
      'tokens._id': [ObjectId]
    },
    virtuals: { id: [VirtualType] },
    singleNestedPaths: {},
    nested: {
      paymentDetails: true,
      'paymentDetails.card': true,
      banStatus: true
    },
    inherits: {},
    callQueue: [],
    _indexes: [],
    methods: {
      initializeTimestamps: [Function (anonymous)],
      generateAuthToken: [AsyncFunction (anonymous)]
    },
    methodOptions: {},
    statics: {},
    tree: {
      username: [Object],
      name: [Object],
      email: [Object],
      password: [Object],
      address: [Object],
      verificationStatus: [Object],
      role: [Object],
      orders: [Array],
      paymentDetails: [Object],
      transactionHistory: [Object],
      tokens: [Array],
      seller: [Object],
      banStatus: [Object],
      verificationCode: [Object],
      verificationCodeExpiresAt: [Object],
      createdAt: [Object],
      updatedAt: [Object],
      _id: [Object],
      __v: [Function: Number],
      id: [VirtualType]
    },
    query: {},
    childSchemas: [ [Object], [Object] ],
    plugins: [ [Object], [Object], [Object], [Object], [Object] ],
    '$id': 2,
    mapPaths: [],
    s: { hooks: [Kareem] },
    _userProvidedOptions: { timestamps: true },
    options: {
      timestamps: true,
      typeKey: 'type',
      id: true,
      _id: true,
      validateBeforeSave: true,
      read: null,
      shardKey: null,
      discriminatorKey: '__t',
      autoIndex: null,
      minimize: true,
      optimisticConcurrency: false,
      versionKey: '__v',
      capped: false,
      bufferCommands: true,
      strictQuery: true,
      strict: true,
      pluralization: true
    },
    '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' },
    '$globalPluginsApplied': true,
    _requiredpaths: [ 'password', 'email', 'name', 'username' ],
    _indexedpaths: [ [Array], [Array] ]
  },
  op: 'findOne',
  options: {},
  _conditions: { _id: '642ae42edb8ab03a6c1bcba2' },
  _fields: { password: 0, tokens: 0 },
  _update: undefined,
  _path: undefined,
  _distinct: undefined,
  _collection: NodeCollection {
    collection: Collection {
      collection: [Collection],
      Promise: [Function: Promise],
      modelName: 'User',
      _closed: false,
      opts: [Object],
      name: 'users',
      collectionName: 'users',
      conn: [NativeConnection],
      queue: [],
      buffer: false,
      emitter: [EventEmitter]
    },
    collectionName: 'users'
  },
  _traceFunction: undefined,
  '$useProjection': true,
  _userProvidedFields: { password: 0, tokens: 0 }
}